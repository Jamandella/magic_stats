@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "breakpoints" as *;
@use "tokens" as *;

@mixin mq($size) {
  @if map.has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if meta.type-of($size) == number {
    @if math.is-unitless($size) {
      @error 'when using a number with @mq() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

@mixin container($width, $padding) {

  $isWidthValid: false;
  @if meta.type-of($width) == 'number' and not math.is-unitless($width) {
    $isWidthValid: true;
  } @else if meta.type-of($width) == 'string' and string.slice($width, 1, 4) == "var(" {
    $isWidthValid: true;
  }
  @if not $isWidthValid {
    @error "Invalid argument for width in container mixin. Please provide a number with units or a valid custom property (e.g., var(--property-name)).";
  }

  $isPaddingValid: false;
  @if meta.type-of($padding) == 'number' and not math.is-unitless($padding) {
    $isPaddingValid: true;
  } @else if meta.type-of($padding) == 'string' and string.slice($padding, 1, 4) == "var(" {
    $isPaddingValid: true;
  }
  @if not $isPaddingValid {
    @error "Invalid argument for padding in container mixin. Please provide a number with units or a valid custom property (e.g., var(--property-name)).";
  }

  width: min($width, 100% - ($padding * 2));
  margin-inline: auto;
}

@mixin heading($fs, $color: $heading-color-default) {
  font-size: $fs;
  color: $color;

  font-family: $heading-font-family;
  text-transform: $heading-text-transform;
  letter-spacing: $heading-letter-spacing;
  font-weight: $heading-font-weight;
  line-height: $heading-line-height;
}

@mixin linear-gradient($deg, $colors...) {
  background-image: linear-gradient($deg, $colors);
}
  